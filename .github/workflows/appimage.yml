name: Release Appimage
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "trunk" ]
    paths:
      - '.github/workflows/appimage.yml'

jobs:
  # Label of the container job
  build-appimage:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: andy5995/0ad-build-env:bionic
    env:
      VERSION: 0.0.26-alpha
      NAME: 0ad
      URI: https://releases.wildfiregames.com
      ARCH: x86_64
      MINISIGN_VERSION: '0.10'
      ABS_PATH_WORK_DIR: ${{ github.workspace }}/build
    steps:
    - uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        cd $ABS_PATH_WORK_DIR
        wget -nv -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-$ARCH.AppImage
        ./linuxdeploy-$ARCH.AppImage --appimage-extract
        wget -nv https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh
        chmod +x linuxdeploy-plugin-gtk.sh
        wget -nv https://github.com/jedisct1/minisign/releases/download/${MINISIGN_VERSION}/minisign-${MINISIGN_VERSION}-linux.tar.gz
        wget -nv https://github.com/jedisct1/minisign/releases/download/${MINISIGN_VERSION}/minisign-${MINISIGN_VERSION}-linux.tar.gz.minisig
        MINISIGN_PATH="./minisign-${MINISIGN_VERSION}-linux/x86_64/minisign"
        tar xf minisign-${MINISIGN_VERSION}-linux.tar.gz
        $MINISIGN_PATH -Vm minisign-${MINISIGN_VERSION}-linux.tar.gz -P RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3
        # Get, check, and extract source
        wget -nv ${URI}/$NAME-$VERSION-unix-build.tar.xz.sha1sum
        wget -nv ${URI}/$NAME-$VERSION-unix-build.tar.xz
        case $URI/ in
          */rc/*) echo "RC, not using minisign";;
          *)
            wget $URI/$NAME-$VERSION-unix-build.tar.xz.minisig
            $MINISIGN_PATH -Vm $NAME-$VERSION-unix-build.tar.xz -P RWTWLbO12+ig3lUExIor3xd6DdZaYFEozn8Bu8nIzY3ImuRYQszIQyyy
          ;;
        esac
        sha1sum -c $NAME-$VERSION-unix-build.tar.xz.sha1sum
        tar xJf $NAME-$VERSION-unix-build.tar.xz

    - name: build
      run: |
        cd $ABS_PATH_WORK_DIR/$NAME-$VERSION/build/workspaces
        ./update-workspaces.sh  \
          -j$(nproc) \
          config=release \
          make -C gcc -j$(nproc)

    - name: prepare AppDir
      run: |
        # Get, check, and extract data
        echo "Getting data and extracting archive..."
        wget -nv ${URI}/$NAME-$VERSION-unix-data.tar.xz.sha1sum
        wget -nv ${URI}/$NAME-$VERSION-unix-data.tar.xz
        case $URI/ in
          */rc/*) echo "RC, not using minisign";;
          *)
            wget -nv ${URI}/$NAME-$VERSION-unix-data.tar.xz.minisig
            $MINISIGN_PATH -Vm $NAME-$VERSION-unix-data.tar.xz -P RWTWLbO12+ig3lUExIor3xd6DdZaYFEozn8Bu8nIzY3ImuRYQszIQyyy
          ;;
        esac
        sha1sum -c $NAME-$VERSION-unix-data.tar.xz.sha1sum
        tar xJf $NAME-$VERSION-unix-data.tar.xz
        ABS_PATH_SRC_ROOT=$ABS_PATH_WORK_DIR/$NAME-$VERSION
        if [ ! -d "$ABS_PATH_WORK_DIR" ]; then
          echo "The work dir must be an absolute path to an existing directory."
          exit 1
        fi
        if [ ! -r "$ABS_PATH_SRC_ROOT/source/main.cpp" ]; then
          echo "set the source root!"
          exit 1
        fi
        APPDIR=$ABS_PATH_WORK_DIR/AppDir
        cd $ABS_PATH_SRC_ROOT
        install -s binaries/system/pyrogenesis -Dt $APPDIR/usr/bin
        install -s binaries/system/ActorEditor -Dt $APPDIR/usr/bin
        cd $APPDIR/usr/bin
        ln -s pyrogenesis 0ad
        for lib in libmozjs78-ps-release.so \
                libnvcore.so    \
                libnvimage.so   \
                libnvmath.so    \
                libnvtt.so
        do
          patchelf --set-rpath $lib:$ABS_PATH_SRC_ROOT/binaries/system pyrogenesis
        done
        patchelf --set-rpath libAtlasUI.so:$ABS_PATH_SRC_ROOT/binaries/system ActorEditor
        # Note that binaries/system{libmoz*.so, libnv*.so, libAtlasUI.so} will be copied into
        # the $APPDIR folder automatically when linuxdeploy is run below.
        cd $ABS_PATH_SRC_ROOT
        install binaries/system/libCollada.so -Dt $APPDIR/usr/lib
        install build/resources/0ad.appdata.xml -Dt $APPDIR/usr/share/metainfo
        install build/resources/0ad.desktop -Dt $APPDIR/usr/share/applications
        install build/resources/0ad.png -Dt $APPDIR/usr/share/pixmaps
        mkdir -p $APPDIR/usr/data/config
        cp -a binaries/data/config/default.cfg $APPDIR/usr/data/config
        cp -a binaries/data/l10n $APPDIR/usr/data
        cp -a binaries/data/tools $APPDIR/usr/data # for Atlas
        cp -a binaries/data/mods $APPDIR/usr/data
        # Create the image
        cd $ABS_PATH_WORK_DIR
        DEPLOY_GTK_VERSION=3 # Variable used by gtk plugin
        ./squashfs-root/AppRun -d $APPDIR/usr/share/applications/0ad.desktop \
          --icon-file=$APPDIR/usr/share/pixmaps/0ad.png \
          --icon-filename=0ad \
          --executable $APPDIR/usr/bin/pyrogenesis \
          --appdir $APPDIR \
          --output appimage \
          --plugin gtk
        mv 0_A.D.-$VERSION-$ARCH.AppImage $NAME-$VERSION-$(printf %.5s $GITHUB_SHA)-$ARCH.AppImage
        echo "Generating sha1sum..."
        sha1sum $NAME-$VERSION-$(printf %.5s $GITHUB_SHA)-$ARCH.AppImage > $NAME-$VERSION-$(printf %.5s $GITHUB_SHA)-$ARCH.AppImage.sha1sum

    - name: Release AppImage
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.NAME }}-${{ env.VERSION }} AppImage
        allowUpdates: True
        prerelease: False
        artifacts: "${{ env.ABS_PATH_WORK_DIR }}/${{ env.NAME }}*.AppImage*"
        token: ${{ secrets.GITHUB_TOKEN }}
        omitNameDuringUpdate: False
        omitBodyDuringUpdate: False
        tag: v${{ env.VERSION }}
        replacesArtifacts: true
    - name: remove artifacts
      run: rm ${{ env.ABS_PATH_WORK_DIR }}/${{ env.NAME }}*.AppImage*

